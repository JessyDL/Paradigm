language: cpp

notifications:
  email: false

cache:
  directories:
  - $HOME/cache
  
branches:
  except:
  - gh-pages

matrix:
  include:
    - os: linux
      dist: trusty
      sudo: false
      compiler: clang
    ##########################################################################
    # Clang on Linux
    ##########################################################################
      name: "Linux CLang 6.0 Release"
      env: VK_VERSION="1.1.82.1" COMPILER=clang++-6.0 BUILD_TYPE=Release LLVM_VERSION_TAG="release_80" BUILD_NAME="Linux CLang 6.0 Release" EXTRA_CMAKE_PARAMS="-DPE_MODE=EXE" UTESTS=false DOXGEN=true CMAKE_VERSION="3.13.2" BADGE=linux
      addons: &clang60
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-6.0
            - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages:
            - clang-6.0
            - clang-tidy-6.0
            - clang-format-6.0
            - clang-tools-6.0
            - libassimp-dev
            - libx11-dev 
            - libx11-xcb-dev 
            - libxrandr-dev
            - doxygen
            - doxygen-doc
            - doxygen-latex
            - graphviz
            - python3
    - name: "Linux CLang 6.0 Unit Tests"
      env: VK_VERSION="1.1.82.1" COMPILER=clang++-6.0 BUILD_TYPE=Release LLVM_VERSION_TAG="release_80" BUILD_NAME="Linux CLang 6.0 Unit Tests" EXTRA_CMAKE_PARAMS="-DPE_MODE=LIB" UTESTS=true CMAKE_VERSION="3.13.2" BADGE=linux-tests
      addons: *clang60
    - os: windows
      filter_secrets: false 
      name: "Windows VC++ Release" 
      env: VK_VERSION="1.1.82.1" COMPILER=VC++ BUILD_TYPE=Release BUILD_NAME="Windows VC++ Release" EXTRA_CMAKE_PARAMS="-DPE_MODE=EXE -DPE_PCH=ON" UTESTS=false DOXGEN=false CMAKE_VERSION="3.13.2" BADGE=windows
      before_install:
        - choco install -y python3
        - export PATH="/c/Python37:/c/Python37/Scripts:$PATH"
    - os: windows
      filter_secrets: false 
      name: "Windows VC++ Unit Tests" 
      env: VK_VERSION="1.1.82.1" COMPILER=VC++ BUILD_TYPE=Release BUILD_NAME="Windows VC++ Unit Tests" EXTRA_CMAKE_PARAMS="-DPE_MODE=LIB -DPE_PCH=ON" UTESTS=true DOXGEN=false CMAKE_VERSION="3.13.2" BADGE=windows-tests
      before_install:
        - choco install -y python3
        - export PATH="/c/Python37:/c/Python37/Scripts:$PATH"
        
install:
  - export CXX=${COMPILER}
  - echo ${TRAVIS_OS_NAME}
  
  - DEPS_DIR="$HOME/cache"
  
  # Install a supported cmake version (>= 3.11)
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      mkdir $HOME/usr
      export PATH="$HOME/usr/bin:$PATH"
      if [ -e "$HOME/cache/cmake/cmake-${CMAKE_VERSION}.sh" ]; then
          cd $HOME/cache/cmake
      else
        mkdir -p $HOME/cache/cmake
        cd $HOME/cache/cmake
        wget -O cmake-${CMAKE_VERSION}.sh https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.sh
      fi
      chmod +x cmake-${CMAKE_VERSION}.sh
      ./cmake-${CMAKE_VERSION}.sh --prefix=$HOME/usr --exclude-subdir --skip-license
    fi
  - cmake --version
  
  # Install Vulkan SDK
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      export VULKAN_SDK="${VULKAN_ROOT_DIR}/${VK_VERSION}/x86_64"
      cd ~
      git clone https://github.com/KhronosGroup/Vulkan-Headers.git Vulkan-Headers
      cd Vulkan-Headers
      git checkout c4e056d365472174471a243dfefbfe66a03564af
      cd ~
      git clone https://github.com/KhronosGroup/Vulkan-Hpp.git Vulkan-Hpp
      cd Vulkan-Hpp
      git checkout 7e701c79d6998260712dc6578732d534871f0f8a
      cd ~
      export VULKAN_ROOT_DIR="$TRAVIS_BUILD_DIR/../VulkanSDK"
      mkdir -p "${VULKAN_ROOT_DIR}/${VK_VERSION}/x86_64/include/vulkan/"
      mkdir -p "${VULKAN_ROOT_DIR}/${VK_VERSION}/Include/vulkan/"
      cp -r Vulkan-Headers/include/vulkan/. "${VULKAN_ROOT_DIR}/${VK_VERSION}/Include/vulkan/"
      cp -r Vulkan-Headers/include/vulkan/. "${VULKAN_ROOT_DIR}/${VK_VERSION}/x86_64/include/vulkan/"
      cp -r Vulkan-Hpp/vulkan/. "${VULKAN_ROOT_DIR}/${VK_VERSION}/Include/vulkan/"
      cp -r Vulkan-Hpp/vulkan/. "${VULKAN_ROOT_DIR}/${VK_VERSION}/x86_64/include/vulkan/"
    else
      export VULKAN_SDK="${VULKAN_ROOT_DIR}/${VK_VERSION}"
      cd ~
      git clone https://github.com/KhronosGroup/Vulkan-Headers.git Vulkan-Headers
      cd Vulkan-Headers
      git checkout c4e056d365472174471a243dfefbfe66a03564af
      cd ~
      git clone https://github.com/KhronosGroup/Vulkan-Hpp.git Vulkan-Hpp
      cd Vulkan-Hpp
      git checkout 7e701c79d6998260712dc6578732d534871f0f8a
      cd ~
      export VULKAN_ROOT_DIR="$TRAVIS_BUILD_DIR/../VulkanSDK"
      mkdir -p "${VULKAN_ROOT_DIR}/${VK_VERSION}/Include/vulkan/"
      cp -r Vulkan-Headers/include/vulkan/. "${VULKAN_ROOT_DIR}/${VK_VERSION}/Include/vulkan/"
      cp -r Vulkan-Hpp/vulkan/. "${VULKAN_ROOT_DIR}/${VK_VERSION}/Include/vulkan/"
    fi
  
  ############################################################################
  # [linux]: Install the right version of libc++
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      cd "${DEPS_DIR}"
      LLVM_INSTALL=${TRAVIS_BUILD_DIR}/../llvm/install
      mkdir -p "${LLVM_INSTALL}"
      if [[ "${TRAVIS_OS_NAME}" == "linux" && "${CXX%%+*}" == "clang" && ! -d "${DEPS_DIR}/llvm" ]]; then   
        git clone https://github.com/llvm-mirror/llvm.git llvm
        mkdir -p llvm/build llvm/projects
        git clone https://github.com/llvm-mirror/libcxx.git llvm/projects/libcxx
        git clone https://github.com/llvm-mirror/libcxxabi.git llvm/projects/libcxxabi

        cd llvm
        git checkout $LLVM_VERSION_TAG
        cd projects/libcxx
        git checkout $LLVM_VERSION_TAG
        cd ../libcxxabi
        git checkout $LLVM_VERSION_TAG
      
        (cd ${DEPS_DIR}/llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_INSTALL})
      fi
      (cd ${DEPS_DIR}/llvm/build/projects/libcxx && make install -j2)
      (cd ${DEPS_DIR}/llvm/build/projects/libcxxabi && make install -j2)
      export CXXFLAGS="-isystem ${LLVM_INSTALL}/include/c++/v1"
      export LDFLAGS="-L ${LLVM_INSTALL}/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_INSTALL}/lib"
    fi

  # Install Ninja
  #- |
  #  if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
  #    if [ ! -d "${DEPS_DIR}/ninja" ]; then
  #      mkdir $DEPS_DIR/ninja
  #      curl -L https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-linux.zip -o $DEPS_DIR/ninja/ninja-linux.zip
  #      unzip $DEPS_DIR/ninja/ninja-linux.zip -d $DEPS_DIR/ninja
  #    fi
  #    export PATH=$PATH:$DEPS_DIR/ninja
  #  fi
  
  # Misc
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      export CXX="clang++-6.0" CC="clang-6.0"
    else
      python --version
    fi
    
  - cd $TRAVIS_BUILD_DIR

script:  
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then    
      python3 build.py --vk_version ${VK_VERSION} --compiler CLang --generator Make --vk_root $TRAVIS_BUILD_DIR/../VulkanSDK --build_config ${BUILD_TYPE} --cmake_params="${EXTRA_CMAKE_PARAMS}"
      cd $TRAVIS_BUILD_DIR/project_files/make/x64/
      make -j2    
    else
      python build.py --vk_version ${VK_VERSION} --vk_root $TRAVIS_BUILD_DIR/../VulkanSDK --build_config ${BUILD_TYPE} --cmake_params="${EXTRA_CMAKE_PARAMS}"
      cd $TRAVIS_BUILD_DIR/project_files/msvc/x64-VC++/
      cmake --build . --config $BUILD_TYPE -j 2
    fi
  - |
    if [[ $UTESTS == true ]]; then
      ctest . -O results.txt --output-on-failure
      if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then 
        export UTESTS_RESULTS="$TRAVIS_BUILD_DIR/project_files/make/x64/results.txt"      
      else
        export UTESTS_RESULTS="$TRAVIS_BUILD_DIR/project_files/msvc/x64-VC++/results.txt"  
      fi
    fi

after_success:
  - |
    if [[ $DOXGEN == true ]]; then
       cd $TRAVIS_BUILD_DIR/tools
       doxygen doxyfile
    fi
  - cd $TRAVIS_BUILD_DIR/tools
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then   
      chmod +x travis-ci-post-send.sh
    fi
  - bash travis-ci-post-send.sh success $WEBHOOK_URL
  
after_failure:
  - cd $TRAVIS_BUILD_DIR/tools
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then   
      chmod +x travis-ci-post-send.sh
    fi
  - bash travis-ci-post-send.sh failure $WEBHOOK_URL
  