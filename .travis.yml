language: cpp
compiler: clang
sudo: false
os: linux

notifications:
  email: false

cache:
  directories:
  - $HOME/cache/llvm-build
  - $HOME/cache/cmake
  

      
matrix:
  include:
    ##########################################################################
    # Clang on Linux
    ##########################################################################
    - name: "Linux CLang 6.0 Release"
    - env: VK_VERSION="1.1.82.1" COMPILER=clang++-6.0 BUILD_TYPE=Release 
    addons: &clang60
      apt:
        sources:
          - ubuntu-toolchain-r-test
          - llvm-toolchain-trusty-6.0
        packages:
          - clang-6.0
          - libassimp-dev
          - libxcb-dri3-0
          - libxcb-present0
          - libxcb-dri3-dev
          - libx11-dev 
          - libx11-xcb-dev 
          - libmirclient-dev 
          - libwayland-dev 
          - libxrandr-dev

    - name: "Linux CLang 6.0 Debug"
    - env: VK_VERSION="1.1.82.1" COMPILER=clang++-6.0 BUILD_TYPE=Debug 
    addons: *clang60
          
before_install:
  - export CXX=${COMPILER}
  - ${CXX} --version
  
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p "${DEPS_DIR}"
  
  # Install a supported cmake version (>= 3.11)
  - mkdir $HOME/usr
  - export PATH="$HOME/usr/bin:$PATH"
  - |
    if [ -e "$HOME/cache/cmake/cmake.sh" ]
    then
      cd $HOME/cache/cmake
    else
      mkdir -p $HOME/cache/cmake
      cd $HOME/cache/cmake
      wget -O cmake.sh https://cmake.org/files/v3.13/cmake-3.13.0-rc2-Linux-x86_64.sh
    fi
  - chmod +x cmake.sh
  - ./cmake.sh --prefix=$HOME/usr --exclude-subdir --skip-license
  
  # Install Vulkan SDK
  - cd ~
  - git clone https://github.com/KhronosGroup/Vulkan-Headers.git Vulkan-Headers
  - cd Vulkan-Headers
  - git checkout c4e056d365472174471a243dfefbfe66a03564af
  - cd ~
  - git clone https://github.com/KhronosGroup/Vulkan-Hpp.git Vulkan-Hpp
  - cd Vulkan-Hpp
  - git checkout 7e701c79d6998260712dc6578732d534871f0f8a
  - cd ~
  - export VULKAN_ROOT_DIR="$TRAVIS_BUILD_DIR/../VulkanSDK"
  - mkdir -p "${VULKAN_ROOT_DIR}/${VK_VERSION}/x86_64/include/vulkan/"
  - mkdir -p "${VULKAN_ROOT_DIR}/${VK_VERSION}/Include/vulkan/"
  - cp -r Vulkan-Headers/include/vulkan/. "${VULKAN_ROOT_DIR}/${VK_VERSION}/Include/vulkan/"
  - cp -r Vulkan-Hpp/vulkan/. "${VULKAN_ROOT_DIR}/${VK_VERSION}/Include/vulkan/"
  - cp -r Vulkan-Headers/include/vulkan/. "${VULKAN_ROOT_DIR}/${VK_VERSION}/x86_64/include/vulkan/"
  - cp -r Vulkan-Hpp/vulkan/. "${VULKAN_ROOT_DIR}/${VK_VERSION}/x86_64/include/vulkan/"
  - export VULKAN_SDK="${VULKAN_ROOT_DIR}/${VK_VERSION}/x86_64"
  
  ############################################################################
  # [linux]: Install the right version of libc++
  ############################################################################
  - cd "${DEPS_DIR}"
  - |
    LLVM_INSTALL=${DEPS_DIR}/llvm/install
    # if in linux and compiler clang and llvm not installed
    if [[ "${TRAVIS_OS_NAME}" == "linux" && "${CXX%%+*}" == "clang" && -n "$(ls -A ${LLVM_INSTALL})" ]]; then
      if   [[ "${CXX}" == "clang++-3.6" ]]; then LLVM_VERSION="3.6.2";
      elif [[ "${CXX}" == "clang++-3.7" ]]; then LLVM_VERSION="3.7.1";
      elif [[ "${CXX}" == "clang++-3.8" ]]; then LLVM_VERSION="3.8.1";
      elif [[ "${CXX}" == "clang++-3.9" ]]; then LLVM_VERSION="3.9.1";
      fi
      LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
      LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
      LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
      mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
      travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm
      travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx
      travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi
      (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_INSTALL})
      (cd llvm/build/projects/libcxx && make install -j2)
      (cd llvm/build/projects/libcxxabi && make install -j2)
      export CXXFLAGS="-isystem ${LLVM_INSTALL}/include/c++/v1"
      export LDFLAGS="-L ${LLVM_INSTALL}/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_INSTALL}/lib"
    fi

  # Install Ninja
  - cd $TRAVIS_BUILD_DIR/../
  - mkdir $TRAVIS_BUILD_DIR/../tmp
  - curl -L https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-linux.zip -o $TRAVIS_BUILD_DIR/../tmp/ninja-linux.zip
  - unzip $TRAVIS_BUILD_DIR/../tmp/ninja-linux.zip -d $TRAVIS_BUILD_DIR/../ninja
  - export PATH=$PATH:$TRAVIS_BUILD_DIR/../ninja
  
  # Misc
  - export CXX="clang++-6.0" CC="clang-6.0"
  - eval "${MATRIX_EVAL}"
  - cd $TRAVIS_BUILD_DIR
  - eval vk_home_dir=${VULKAN_ROOT_DIR}
  - echo $vk_home_dir # prints home path
  

script:
  - echo ${VK_VERSION}
  - bash build.sh -VULKAN_VERSION ${VK_VERSION} -COMPILER CLang -G Ninja -VULKAN_ROOT $TRAVIS_BUILD_DIR/../VulkanSDK -cmake_params "-DPARADIGM_CORE_EXECUTABLE=true"
  - cd $TRAVIS_BUILD_DIR/project_files/ninja/x64/
  - ninja
  
after_success:
  - wget https://raw.githubusercontent.com/DiscordHooks/travis-ci-discord-webhook/master/send.sh
  - chmod +x send.sh
  - ./send.sh success $WEBHOOK_URL
after_failure:
  - wget https://raw.githubusercontent.com/DiscordHooks/travis-ci-discord-webhook/master/send.sh
  - chmod +x send.sh
  - ./send.sh failure $WEBHOOK_URL
  
  