FROM ubuntu:16.04

ENV	CMAKE_VERSION="3.13"
ENV	CMAKE_PATCH="3"
ENV	VK_VERSION="1.1.82.1"
ENV CLANG_VERSION="6.0"
ENV LLVM_INSTALL="/llvm/install"
ENV LLVM_VERSION_TAG="master"
ENV EXTRA_CMAKE_PARAMS="-DPE_MODE=LIB"
ENV DOXGEN=false
ENV CORE_COUNT=6
ENV CC="clang-6.0" CXX="clang++-6.0"
ENV LLVM_VERSION_TAG=master
ENV BUILD_TYPE=Release


# misc tools
RUN apt-get update && \
	apt-get install -y ca-certificates && \
	apt-get install -y --no-install-recommends apt-utils \
	curl \
  gcc-arm-none-eabi \
  build-essential \
	wget  \
	git
	
	
# set CLang 6.0 as the default
RUN apt-get update && \
	apt-get install clang-${CLANG_VERSION} -y

	
#documentation tools 
RUN apt-get update && \
	apt-get install doxygen -y \
	doxygen-latex \
	graphviz
		
#graphics libraries
RUN apt-get update && \
	apt-get install libx11-dev -y \
	libx11-xcb-dev \
	libxrandr-dev
	
#paradigm toolset dependencies
RUN apt-get update && \
	apt-get install libassimp-dev -y \
	python3
	
# purge cmake, we will install a later version
RUN apt-get update && \
	apt-get remove --purge -y cmake && \
	apt-get autoremove -y && apt-get autoclean -y && \
	apt-get clean && \
	rm -rf /var/lib/apt/lists/*
	
WORKDIR /
# cmake
RUN mkdir /cmake && \
	cd /cmake  && \
	wget https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.${CMAKE_PATCH}-Linux-x86_64.tar.gz && \
	tar xf cmake-${CMAKE_VERSION}.${CMAKE_PATCH}-Linux-x86_64.tar.gz
	
ENV PATH=${PATH}:/cmake/cmake-${CMAKE_VERSION}.${CMAKE_PATCH}-Linux-x86_64/bin

WORKDIR /
RUN LLVM_BASE=llvm && \
  LLVM_INSTALL=/${LLVM_BASE}/install && \
	git clone --depth=1 https://github.com/llvm-mirror/llvm.git ${LLVM_BASE} && \
	mkdir -p ${LLVM_BASE}/build ${LLVM_BASE}/projects && \
	git clone --depth=1 https://github.com/llvm-mirror/libcxx.git ${LLVM_BASE}/projects/libcxx && \
	git clone --depth=1 https://github.com/llvm-mirror/libcxxabi.git ${LLVM_BASE}/projects/libcxxabi && \
	mkdir -p "${LLVM_INSTALL}" && \
	cd ${LLVM_BASE} && \
	git checkout $LLVM_VERSION_TAG && \
	cd projects/libcxx && \
	git checkout $LLVM_VERSION_TAG && \
	cd ../libcxxabi && \
	git checkout $LLVM_VERSION_TAG && \
	(cd /llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_INSTALL}) && \
	(cd /${LLVM_BASE}/build/projects/libcxx && make install -j${CORE_COUNT}) && \
	(cd /${LLVM_BASE}/build/projects/libcxxabi && make install -j${CORE_COUNT})
	
ENV CXXFLAGS="-isystem ${LLVM_INSTALL}/include/c++/v1"
ENV LDFLAGS="-L ${LLVM_INSTALL}/lib -l c++ -l c++abi"
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_INSTALL}/lib"

CMD [ "/bin/bash" ]
WORKDIR /

# install vulkan
WORKDIR VulkanSDK
RUN git clone https://github.com/KhronosGroup/Vulkan-Headers.git Vulkan-Headers  && \
	(cd Vulkan-Headers  && git checkout c4e056d365472174471a243dfefbfe66a03564af)  && \
	git clone https://github.com/KhronosGroup/Vulkan-Hpp.git Vulkan-Hpp  && \
	(cd Vulkan-Hpp && git checkout 7e701c79d6998260712dc6578732d534871f0f8a)  && \
	mkdir -p "${VK_VERSION}/x86_64/include/vulkan/"  && \
	mkdir -p "${VK_VERSION}/Include/vulkan/"  && \
	cp -r Vulkan-Headers/include/vulkan/. "${VK_VERSION}/Include/vulkan/"  && \
	cp -r Vulkan-Hpp/vulkan/. "${VK_VERSION}/Include/vulkan/"  && \
	cp -r Vulkan-Headers/include/vulkan/. "${VK_VERSION}/x86_64/include/vulkan/"  && \
	cp -r Vulkan-Hpp/vulkan/. "${VK_VERSION}/x86_64/include/vulkan/"

ENV VULKAN_ROOT_DIR="/VulkanSDK"
ENV VULKAN_SDK="${VULKAN_ROOT_DIR}/${VK_VERSION}/x86_64"

WORKDIR /
# get, install, and build the project
COPY scripts /
RUN chmod +x /install.sh

CMD ["/bin/bash", "/install.sh"]